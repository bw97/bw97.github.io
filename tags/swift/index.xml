<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swift on wzso</title><link>https://wzso.github.io/tags/swift/</link><description>Recent content in swift on wzso</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>wzso</copyright><lastBuildDate>Sun, 16 Jul 2023 09:35:21 +0800</lastBuildDate><atom:link href="https://wzso.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes: Swift Result</title><link>https://wzso.github.io/post/swift-result/</link><pubDate>Sun, 16 Jul 2023 09:35:21 +0800</pubDate><guid>https://wzso.github.io/post/swift-result/</guid><description>Definition 1 2 3 4 5 6 7 8 9 10 /// A value that represents either a success or a failure, including an /// associated value in each case. @frozen public enum Result&amp;lt;Success, Failure&amp;gt; where Failure : Error { /// A success, storing a `Success` value. case success(Success) /// A failure, storing a `Failure` value. case failure(Failure) } Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 struct Person: Decodable { let name: String let age: Int } extension String: Error {} func loadPerson(from json: String) -&amp;gt; Result&amp;lt;Person, Error&amp;gt; { guard let data = json.</description></item><item><title>Swift Expressible Literal</title><link>https://wzso.github.io/post/swift-expressible-literal/</link><pubDate>Tue, 12 Jan 2021 10:33:52 +0800</pubDate><guid>https://wzso.github.io/post/swift-expressible-literal/</guid><description>This is the English version of my post at cnblogs.com.
A Question Given the code bellow:
1 2 3 4 5 struct Book { let name: String } let book: Book = &amp;#34;Charlotte&amp;#39;s Web&amp;#34; Is there a way to make it work?
So, is there a way to implicitly create a struct from a string literal?
Expressible Literal Protocol The answer is yes, with the the magic of expressible literal protocol.</description></item></channel></rss>